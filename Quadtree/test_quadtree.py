import numpy as np
from quadtree import QuadTree

def main():
    inputs, labels = get_test_data()
    for input, label in zip(inputs, labels):
        tree = QuadTree(input)
        tree.print_tree()
        print(label)

def get_test_data():
    inputs = [
        np.array([
            [1,1,1,1,0,0,0,0],
            [1,1,1,1,0,0,1,0],
            [1,1,1,1,1,1,0,0],
            [1,1,1,1,1,1,0,0],
            [1,1,1,1,0,0,0,0],
            [1,1,1,1,0,0,0,0],
            [1,1,1,1,0,0,1,1],
            [1,1,1,1,0,0,1,1],
        ]),
        np.array([
            [1,1,1,1,0,0,0,0],
            [1,1,1,1,0,0,0,0],
            [0,0,0,1,1,1,0,0],
            [0,0,0,1,1,1,0,0],
            [1,1,1,1,0,0,0,0],
            [1,1,1,1,0,0,0,0],
            [1,1,1,1,0,0,1,1],
            [1,1,1,1,0,0,1,1],
        ]),
        np.array([
            [1,1,1,1,0,0,1,1],
            [1,1,1,1,0,0,1,1],
            [1,1,1,1,1,1,0,0],
            [1,1,1,1,1,1,0,0],
            [1,1,1,1,1,1,1,1],
            [1,1,1,1,1,1,1,1],
            [1,1,1,1,0,0,1,1],
            [1,1,1,1,0,0,1,1],
        ]),
        np.array([
            [1,1,1,1,1,1,1,1],
            [1,1,1,1,1,1,1,1],
            [1,1,1,1,1,1,1,1],
            [1,1,1,1,1,1,1,1],
            [1,1,1,1,1,1,1,1],
            [1,1,1,1,1,1,1,1],
            [1,1,1,1,0,0,1,1],
            [1,1,1,1,0,0,1,1],
        ]),
        np.array([
            [1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0],
            [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0],
            [1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1],
            [1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1],
            [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0],
            [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0],
            [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0],
            [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0],
            [1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0],
            [1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0],
            [1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
            [1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1],
            [0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1],
            [0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1],
            [0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1],
        ]),
        np.array([
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
            [1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],
            [1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],
            [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0],
            [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0],
            [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0],
            [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0],
            [1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0],
            [1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0],
            [1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
            [1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        ]),
    ]

    labels = [
        '(1(0(0010)10)1(0001))',
        '((110(0101))(0010)1(0001))',
        '(1(0110)1(1101))',
        '(111(1101))',
        '(1(((1000)000)(0001)00)(1(0100)00)(00(0101)1))',
        '(1(1((1110)000)00)(1(1000)((1010)000)0)0)',
    ]

    return inputs, labels


if __name__=="__main__":
    main()